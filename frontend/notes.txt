1> PS C:\Users\Kamal\OneDrive\Desktop\vs\mern\AsAProg\mern\chat-app> cd .\frontend\
npm create vite@latest .
npm install
npm run dev 

2> PS C:\Users\Kamal\OneDrive\Desktop\vs\mern\AsAProg\mern\chat-app\backend> npm init -y
npm i express mongoose dotenv jsonwebtoken bcryptjs cookie-parser cloudinary socket.io
npm i nodemon -D

3> port on 5001
5001 -> cannot get / , on port where server running, 
5000 -> This site can’t be reached
localhost refused to connect.

4> git github 1st commit
git init 
git add .
git commit -m "first commit"
$ git remote add origin https://github.com/Kamal-Kothari/Chat-App.git
git branch -M main
git push -u origin main

5> next commit
git add .
git commit -m "update"
git push 
git add . && git commit -m "Update code" && git push 

6> 
\frontend> npm i react-router-dom react-hot-toast
tailwind v3 for vite 
daisyui v4.12.23

7> jsx
element={<h1>Home</h1>}
Use {} to embed JavaScript expressions inside JSX. In this case, we are embedding a JSX element (<h1>Home</h1>) as a JavaScript expression.

JSX requires {} when:

You're passing anything other than a string.

You're passing a component, a function call, a variable, or JSX itself.

8> nested routing
    // no / in profile hence child of dash, else root level
    // profile correct, /profile incorrect
    <Routes>
      <Route path="/" element={<Home />} />

      <Route path="/dashboard" element={<Dashboard />}>
        <Route path="profile" element={<Profile />} />
        <Route path="settings" element={<Settings />} />
      </Route>
    </Routes>

    <div>
      <h1>Dashboard</h1>
      <nav className="flex gap-4">
        <Link to="profile">Profile</Link>
        <Link to="settings">Settings</Link>
      </nav>
      
      {/* This is where nested routes will render */}
      <Outlet />
    </div>

9> zustand best practice
useUserStore()	Entire store	❌ Can cause unnecessary re-renders
useUserStore((state) => state.user)	Just user	✅ Efficient
useUserStore((state) => ({ user: state.user, setUser: state.setUser }))	Only what's needed	✅ Best practice

10> return object
() => {} arrow function
() => ({}) arrow function will return an object

11> create and set 
The result of create() is a custom React hook (useUserStore) that gives access to your store.
The function setUser, which when called, triggers a state update.

12>
When you make a request using Axios (like axios.get()), Axios returns a response object that looks like this:

{
  data: {},         // <-- This is the actual response body from the server
  status: 200,
  statusText: "OK",
  headers: {},
  config: {},
  request: {}
}
So yes, res.data always holds the response payload—i.e., what your backend sends using res.json(...) or res.send(...) in Express.

13> cors error cross-origin requests
Access to XMLHttpRequest at 'http://localhost:5001/api/auth/check' from origin 'http://localhost:5173' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.
origin = protocol://domain:port
two different origins , backend does not allow req from frontend unless we mention using cors middleware
http://localhost:5173 → Vite (frontend)
http://localhost:5001 → Express (backend)

14>
console.log(authUser)
kamal
console.log({ authUser }) //It’s useful for debugging because it shows the variable name and value.
{ authUser: 'kamal' }

15> react-router-dom 
1. Basic Routing 
import { BrowserRouter, Routes, Route } 

2. nested routing
<Route path="/dashboard" element={<Dashboard />}>
  <Route path="profile" element={<Profile />} />
  <Route path="settings" element={<Settings />} />
</Route>
Use <Outlet /> inside Dashboard to render nested components.

3. navigation (direct in ui through click)
import { Link, NavLink } from 'react-router-dom';

<Link to="/about">About</Link>
<NavLink to="/about" className={({ isActive }) => isActive ? 'active' : ''}>About</NavLink>
//NavLink knows if the link is currently "active" (i.e., if the current route matches the to prop).

4. Programmatic Navigation inside code (after submit form, after successful login, etc)
import { useNavigate } from 'react-router-dom';

const navigate = useNavigate();
navigate('/login');

import { useNavigate } from 'react-router-dom';

const Login = () => {
  const navigate = useNavigate();

  const handleLogin = () => {
    // login logic here...
    navigate('/dashboard'); // redirect after success
  };

  return <button onClick={handleLogin}>Login</button>;
};

5. Redirect
import { Navigate } from 'react-router-dom';

<Route path="/" element={user ? <Home /> : <Navigate to="/login" />} />

6. Access Route Params
import { useParams } from 'react-router-dom';

const { id } = useParams(); // for route /user/:id

7. Read Query Params
import { useSearchParams } from 'react-router-dom';

const [searchParams] = useSearchParams();
const keyword = searchParams.get('q');

8. Custom Private Route

9. 404 Route (Not Found)
<Route path="*" element={<NotFound />} />

10. Lazy Loading Routes

16> sticky navbar instead of fixed (in fixed next element gets bit overlap as navbar is taken out of flow)

17>
{" "}

In JSX, line breaks and spaces don’t automatically render. {" "} ensures there's a visible space between the text and the link.

Already have an account?
  &nbsp;&nbsp;&nbsp;&nbsp;
  Each &nbsp; is one space. So 4 of them give roughly a tab space.

18> dynamic key
const handleChange = (e) => {
  setFormData({ ...formData, [e.target.name]: e.target.value });
};

19> input field component to avoid repetition
import React from "react";

const InputField = ({
  label,
  placeholder,
  value,
  onChange,
  type = "text", // Default type is text, but you can change it for different types like 'email' or 'password'
  icon: Icon = null, // Option to add an icon
}) => {
  return (
    <div className="form-control">
      <label className="label">
        <span className="label-text font-medium">{label}</span>
      </label>
      <div className="relative">
        {Icon && (
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Icon className="size-5 text-base-content/40" />
          </div>
        )}
        <input
          type={type}
          className={`input input-bordered w-full ${Icon ? "pl-10" : ""}`}
          placeholder={placeholder}
          value={value}
          onChange={onChange}
        />
      </div>
    </div>
  );
};

export default InputField;

import React, { useState } from "react";
import { User, Mail, Lock } from "react-feather"; // Icons for user, mail, and lock
import InputField from "./InputField"; // Path to your InputField component

const CreateAccountForm = () => {
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    password: "",
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  return (
    <form>
      {/* Full Name */}
      <InputField
        label="Full Name"
        placeholder="John Doe"
        value={formData.fullName}
        onChange={handleChange}
        name="fullName"
        icon={User} // Icon for Full Name
      />

      {/* Email */}
      <InputField
        label="Email"
        placeholder="example@example.com"
        value={formData.email}
        onChange={handleChange}
        name="email"
        type="email" // Email input type
        icon={Mail} // Icon for Email
      />

      {/* Password */}
      <InputField
        label="Password"
        placeholder="********"
        value={formData.password}
        onChange={handleChange}
        name="password"
        type="password" // Password input type
        icon={Lock} // Icon for Password
      />

      <button type="submit" className="btn btn-primary w-full mt-4">
        Create Account
      </button>
    </form>
  );
};

export default CreateAccountForm;

20> show password toggle 
import { useState } from "react";
import { Lock, Eye, EyeOff } from "react-feather"; // Import icons, assuming you're using react-feather for icons

const InputField = ({
  label,
  type = "text",
  value,
  onChange,
  placeholder = "",
  icon = <Lock className="size-5 text-base-content/40" />,
  showPasswordToggle = false,
}) => {
  const [showPassword, setShowPassword] = useState(false);

  const handlePasswordToggle = () => {
    setShowPassword(!showPassword);
  };

  return (
    <div className="form-control">
      <label className="label">
        <span className="label-text font-medium">{label}</span>
      </label>
      <div className="relative">
        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          {icon}
        </div>
        <input
          type={showPasswordToggle && showPassword ? "text" : type}
          className="input input-bordered w-full pl-10"
          placeholder={placeholder}
          value={value}
          onChange={onChange}
        />
        {showPasswordToggle && (
          <button
            type="button"
            className="absolute inset-y-0 right-0 pr-3 flex items-center"
            onClick={handlePasswordToggle}
          >
            {showPassword ? (
              <EyeOff className="size-5 text-base-content/40" />
            ) : (
              <Eye className="size-5 text-base-content/40" />
            )}
          </button>
        )}
      </div>
    </div>
  );
};

export default InputField;

import { useState } from "react";
import InputField from "./InputField"; // Import the reusable component

const Form = () => {
  const [formData, setFormData] = useState({
    password: "",
    fullName: "",
    email: "",
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  return (
    <form>
      <InputField
        label="Full Name"
        value={formData.fullName}
        onChange={handleChange}
        placeholder="John Doe"
      />
      <InputField
        label="Email"
        value={formData.email}
        onChange={handleChange}
        placeholder="johndoe@example.com"
        type="email"
      />
      <InputField
        label="Password"
        value={formData.password}
        onChange={handleChange}
        placeholder="••••••••"
        type="password"
        showPasswordToggle={true}
      />
    </form>
  );
};

export default Form;

21> ways to implement profile pic update
base64 upload - for small files with quick preview
FormData - for large files 

22> hide file input and show camera icon, htmlFor matches with id avatar-upload or wrap input inside label
<label
    htmlFor="avatar-upload"
    className={``}
>
    <Camera className="w-5 h-5 text-base-200" />
    <input
        type="file"
        id="avatar-upload"
        className="hidden"
        accept="image/*"
        onChange={handleImageUpload}
        disabled={isUpdatingProfile}
    />
</label>
